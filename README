# fuse-rpi-dfs

To run what's there, connect one or more pies and run
```sh
./build/mac/deploy ./build/pi/pi-side.bin
```

System primitives:
- sd_readblock(...) defined in pi/bzt-sd.h
- sd_writeblock(...) "
^^ Use these to interpret the existing fat32 filesystem,
write a dead simple (stateful) sector allocator that we can use
to maintain sectors in use by our system. We will use the page
allocator to read and write sectors for our file system.

pi-mac interface:
mac-side:
- To send data from the mac to pi n (where n indicates the 
index into the pi-install.c:line 55:pies array), we use the 
write system call on pies[n].fd where fd is the pies file
descriptor. Read works the same way.
pi-side:
- to send data from a pi to the mac, we issue uart commands:
uart_put8(char c) sends a character to the mac, to be read when
the mac issues a read system call on the pi's associated fd. 
uart_get8() returns the latest byte that the mac wrote to the
pi's fd. uart_hex puts a 32 bit int into the pi->mac wire
in little-end order.




Todo:
- Install macfuse (https://osxfuse.github.io)
- Go through each method contained in \
		/usr/local/include/fuse/fuse.h::struct fuse_operations: \
	Determine what each function is supposed to do in a regular filesystem. \
	Understand the sfsro equivalent. \
	Implement.


open:
opendir:
readdir:
releasedir:

init:
destroy:
access??:

read_buf:

For any FUSE filesystem, include this in implementation file:

#define FUSE_USE_VERSION 26

#include "fuse.h"

